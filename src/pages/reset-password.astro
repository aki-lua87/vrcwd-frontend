---
import Footer from '../components/Footer.astro';
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>パスワードリセット - VRChat Worlds Dashboard</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
					Roboto, sans-serif;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				margin: 0;
				padding: 0;
				min-height: 100vh;
				display: flex;
				flex-direction: column;
			}

			.main-content {
				flex: 1;
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				padding: 2rem;
				min-height: calc(100vh - 140px);
			}

			.site-title {
				color: white;
				font-size: 2.5rem;
				font-weight: 700;
				margin-bottom: 1rem;
				text-align: center;
				text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
			}

			.site-subtitle {
				color: rgba(255, 255, 255, 0.9);
				font-size: 1.1rem;
				margin-bottom: 2rem;
				text-align: center;
				font-weight: 400;
			}

			.reset-container {
				background: white;
				padding: 2rem;
				border-radius: 12px;
				box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
				width: 100%;
				max-width: 400px;
				text-align: center;
			}

			h2 {
				color: #333;
				margin-bottom: 1.5rem;
				font-size: 1.8rem;
			}

			.step-indicator {
				display: flex;
				justify-content: center;
				margin-bottom: 2rem;
			}

			.step {
				width: 30px;
				height: 30px;
				border-radius: 50%;
				background: #ddd;
				color: white;
				display: flex;
				align-items: center;
				justify-content: center;
				margin: 0 0.5rem;
				font-size: 0.9rem;
				font-weight: 600;
			}

			.step.active {
				background: #667eea;
			}

			.step.completed {
				background: #28a745;
			}

			.input-group {
				margin-bottom: 1.5rem;
				text-align: left;
			}

			label {
				display: block;
				margin-bottom: 0.5rem;
				color: #555;
				font-weight: 500;
			}

			input[type="email"],
			input[type="text"],
			input[type="password"] {
				width: 100%;
				padding: 0.75rem;
				border: 2px solid #ddd;
				border-radius: 6px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
				box-sizing: border-box;
			}

			input[type="email"]:focus,
			input[type="text"]:focus,
			input[type="password"]:focus {
				outline: none;
				border-color: #667eea;
			}

			.action-button {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				border: none;
				padding: 0.75rem 2rem;
				font-size: 1rem;
				font-weight: 600;
				border-radius: 6px;
				cursor: pointer;
				transition:
					transform 0.2s ease,
					box-shadow 0.2s ease;
				width: 100%;
				margin-bottom: 1rem;
			}

			.action-button:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.action-button:disabled {
				opacity: 0.6;
				cursor: not-allowed;
				transform: none;
				box-shadow: none;
			}

			.message {
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				display: none;
			}

			.error-message {
				background: #ffe6e6;
				color: #d73a49;
				border: 1px solid #f5b7b1;
			}

			.success-message {
				background: #e6ffe6;
				color: #28a745;
				border: 1px solid #b7f5b7;
			}

			.info-message {
				background: #e3f2fd;
				color: #1976d2;
				border: 1px solid #bbdefb;
			}

			.links {
				text-align: center;
				margin-top: 1rem;
			}

			.links a {
				color: #667eea;
				text-decoration: none;
				margin: 0 0.5rem;
				font-size: 0.9rem;
			}

			.links a:hover {
				text-decoration: underline;
			}

			.password-requirements {
				font-size: 0.85rem;
				color: #666;
				margin-top: 0.5rem;
				text-align: left;
			}

			.step-container {
				display: none;
			}

			.step-container.active {
				display: block;
			}
		</style>
	</head>
	<body>
		<div class="main-content">
			<h1 class="site-title">VRChat Worlds Dashboard</h1>
			<p class="site-subtitle">VRChatワールドを効率的に管理・整理</p>
			<div class="reset-container">
				<h2>パスワードリセット</h2>

			<div class="step-indicator">
				<div class="step active" id="step1">1</div>
				<div class="step" id="step2">2</div>
				<div class="step" id="step3">3</div>
			</div>

			<div id="errorMessage" class="message error-message"></div>
			<div id="successMessage" class="message success-message"></div>
			<div id="infoMessage" class="message info-message"></div>

			<!-- ステップ1: メールアドレス入力 -->
			<div id="step1Container" class="step-container active">
				<form id="requestResetForm">
					<div class="input-group">
						<label for="email">メールアドレス</label>
						<input
							type="email"
							id="email"
							name="email"
							required
							placeholder="登録済みのメールアドレス"
						/>
					</div>
					<button type="submit" class="action-button" id="requestResetButton">
						リセットコードを送信
					</button>
				</form>
			</div>

			<!-- ステップ2: 確認コード入力 -->
			<div id="step2Container" class="step-container">
				<form id="verifyCodeForm">
					<div class="input-group">
						<label for="confirmationCode">確認コード</label>
						<input
							type="text"
							id="confirmationCode"
							name="confirmationCode"
							required
							placeholder="メールで受信した6桁のコード"
						/>
					</div>
					<button type="submit" class="action-button" id="verifyCodeButton">
						コードを確認
					</button>
				</form>
			</div>

			<!-- ステップ3: 新しいパスワード設定 -->
			<div id="step3Container" class="step-container">
				<form id="resetPasswordForm">
					<div class="input-group">
						<label for="newPassword">新しいパスワード</label>
						<input
							type="password"
							id="newPassword"
							name="newPassword"
							required
							placeholder="新しいパスワード"
						/>
						<div class="password-requirements">
							※ 8文字以上、大文字・小文字・数字を含む必要があります
						</div>
					</div>
					<div class="input-group">
						<label for="confirmNewPassword">新しいパスワード（確認）</label>
						<input
							type="password"
							id="confirmNewPassword"
							name="confirmNewPassword"
							required
							placeholder="新しいパスワード（確認）"
						/>
					</div>
					<button type="submit" class="action-button" id="resetPasswordButton">
						パスワードをリセット
					</button>
				</form>
			</div>

			<div class="links">
				<a href="/">ログインページに戻る</a>
				</div>
			</div>
		</div>

		<Footer />

		<script
			define:vars={{
				cognitoRegion: import.meta.env.PUBLIC_COGNITO_REGION,
				cognitoUserPoolId: import.meta.env.PUBLIC_COGNITO_USER_POOL_ID,
				cognitoClientId: import.meta.env.PUBLIC_COGNITO_CLIENT_ID,
			}}
		>
			const CONFIG = {
				COGNITO_USER_POOL_ID: cognitoUserPoolId,
				COGNITO_CLIENT_ID: cognitoClientId,
				AWS_REGION: cognitoRegion,
			};

			class CognitoAuth {
				constructor(config) {
					this.config = config;
				}

				async forgotPassword(username) {
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target": "AWSCognitoIdentityProviderService.ForgotPassword",
							},
							body: JSON.stringify({
								ClientId: this.config.COGNITO_CLIENT_ID,
								Username: username,
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(error.message || "パスワードリセットの送信に失敗しました");
					}

					return await response.json();
				}

				async confirmForgotPassword(username, confirmationCode, password) {
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target": "AWSCognitoIdentityProviderService.ConfirmForgotPassword",
							},
							body: JSON.stringify({
								ClientId: this.config.COGNITO_CLIENT_ID,
								Username: username,
								ConfirmationCode: confirmationCode,
								Password: password,
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(error.message || "パスワードリセットに失敗しました");
					}

					return await response.json();
				}
			}

			const cognitoAuth = new CognitoAuth(CONFIG);
			let currentEmail = "";

			function showError(message) {
				const errorDiv = document.getElementById("errorMessage");
				errorDiv.textContent = message;
				errorDiv.style.display = "block";
				document.getElementById("successMessage").style.display = "none";
				document.getElementById("infoMessage").style.display = "none";
			}

			function showSuccess(message) {
				const successDiv = document.getElementById("successMessage");
				successDiv.textContent = message;
				successDiv.style.display = "block";
				document.getElementById("errorMessage").style.display = "none";
				document.getElementById("infoMessage").style.display = "none";
			}

			function showInfo(message) {
				const infoDiv = document.getElementById("infoMessage");
				infoDiv.textContent = message;
				infoDiv.style.display = "block";
				document.getElementById("errorMessage").style.display = "none";
				document.getElementById("successMessage").style.display = "none";
			}

			function hideMessages() {
				document.getElementById("errorMessage").style.display = "none";
				document.getElementById("successMessage").style.display = "none";
				document.getElementById("infoMessage").style.display = "none";
			}

			function goToStep(stepNumber) {
				// Hide all step containers
				document.querySelectorAll('.step-container').forEach(container => {
					container.classList.remove('active');
				});

				// Update step indicators
				document.querySelectorAll('.step').forEach((step, index) => {
					step.classList.remove('active', 'completed');
					if (index + 1 < stepNumber) {
						step.classList.add('completed');
					} else if (index + 1 === stepNumber) {
						step.classList.add('active');
					}
				});

				// Show current step container
				document.getElementById(`step${stepNumber}Container`).classList.add('active');
				hideMessages();
			}

			// ステップ1: メールアドレス送信
			document.getElementById("requestResetForm").addEventListener("submit", async function (e) {
				e.preventDefault();
				hideMessages();

				const email = document.getElementById("email").value.trim();

				if (!email) {
					showError("メールアドレスを入力してください。");
					return;
				}

				const requestButton = document.getElementById("requestResetButton");
				requestButton.disabled = true;
				requestButton.textContent = "送信中...";

				try {
					// @を_at_に置き換え（サインアップ時と同様）
					const username = email.replace(/@/g, "_at_");
					await cognitoAuth.forgotPassword(username);
					currentEmail = email;
					
					showInfo("確認コードをメールに送信しました。");
					goToStep(2);
				} catch (error) {
					showError(error.message);
				} finally {
					requestButton.disabled = false;
					requestButton.textContent = "リセットコードを送信";
				}
			});

			// ステップ2: 確認コード検証
			document.getElementById("verifyCodeForm").addEventListener("submit", async function (e) {
				e.preventDefault();
				hideMessages();

				const confirmationCode = document.getElementById("confirmationCode").value.trim();

				if (!confirmationCode) {
					showError("確認コードを入力してください。");
					return;
				}

				// 一時的に次のステップに進む（実際の検証は最後に行う）
				showInfo("確認コードを受け付けました。新しいパスワードを設定してください。");
				goToStep(3);
			});

			// ステップ3: パスワードリセット
			document.getElementById("resetPasswordForm").addEventListener("submit", async function (e) {
				e.preventDefault();
				hideMessages();

				const newPassword = document.getElementById("newPassword").value;
				const confirmNewPassword = document.getElementById("confirmNewPassword").value;
				const confirmationCode = document.getElementById("confirmationCode").value.trim();

				if (!newPassword || !confirmNewPassword) {
					showError("すべての項目を入力してください。");
					return;
				}

				if (newPassword !== confirmNewPassword) {
					showError("パスワードが一致しません。");
					return;
				}

				if (newPassword.length < 8) {
					showError("パスワードは8文字以上で入力してください。");
					return;
				}

				// パスワード強度チェック
				const hasUpperCase = /[A-Z]/.test(newPassword);
				const hasLowerCase = /[a-z]/.test(newPassword);
				const hasNumbers = /\d/.test(newPassword);

				if (!hasUpperCase || !hasLowerCase || !hasNumbers) {
					showError("パスワードには大文字、小文字、数字を含む必要があります。");
					return;
				}

				const resetButton = document.getElementById("resetPasswordButton");
				resetButton.disabled = true;
				resetButton.textContent = "リセット中...";

				try {
					// @を_at_に置き換え
					const username = currentEmail.replace(/@/g, "_at_");
					await cognitoAuth.confirmForgotPassword(username, confirmationCode, newPassword);
					
					showSuccess("パスワードが正常にリセットされました。ログインページに移動します。");
					
					setTimeout(() => {
						window.location.href = "/";
					}, 3000);
				} catch (error) {
					showError(error.message);
				} finally {
					resetButton.disabled = false;
					resetButton.textContent = "パスワードをリセット";
				}
			});
		</script>
	</body>
</html>