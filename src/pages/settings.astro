---
import Footer from '../components/Footer.astro';
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>設定 - VRChat Worlds Dashboard</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
					Roboto, sans-serif;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				margin: 0;
				padding: 0;
				min-height: 100vh;
				color: #333;
				display: flex;
				flex-direction: column;
			}

			.main-wrapper {
				flex: 1;
				padding: 20px;
				display: flex;
				flex-direction: column;
			}

			.container {
				max-width: 600px;
				margin: 0 auto;
				background: white;
				padding: 2rem;
				border-radius: 12px;
				box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
				flex: 1;
				width: 100%;
				box-sizing: border-box;
			}

			.header {
				display: flex;
				align-items: center;
				margin-bottom: 2rem;
			}

			.back-button {
				background: none;
				border: none;
				font-size: 1.5rem;
				cursor: pointer;
				margin-right: 1rem;
				padding: 0.5rem;
				border-radius: 6px;
				transition: background-color 0.3s ease;
			}

			.back-button:hover {
				background-color: #f0f0f0;
			}

			h1 {
				color: #333;
				margin: 0;
				font-size: 1.8rem;
			}

			.section {
				margin-bottom: 2rem;
				padding: 1.5rem;
				border: 1px solid #e0e0e0;
				border-radius: 8px;
				background: #fafafa;
			}

			.section h2 {
				color: #555;
				margin-top: 0;
				margin-bottom: 1rem;
				font-size: 1.2rem;
			}

			.input-group {
				margin-bottom: 1.5rem;
			}

			label {
				display: block;
				margin-bottom: 0.5rem;
				color: #555;
				font-weight: 500;
			}

			input[type="password"] {
				width: 100%;
				padding: 0.75rem;
				border: 2px solid #ddd;
				border-radius: 6px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
				box-sizing: border-box;
			}

			input[type="password"]:focus {
				outline: none;
				border-color: #667eea;
			}

			.password-requirements {
				font-size: 0.85rem;
				color: #666;
				margin-top: 0.5rem;
			}

			.change-password-button {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				border: none;
				padding: 0.75rem 2rem;
				font-size: 1rem;
				font-weight: 600;
				border-radius: 6px;
				cursor: pointer;
				transition:
					transform 0.2s ease,
					box-shadow 0.2s ease;
				width: 100%;
			}

			.change-password-button:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.change-password-button:disabled {
				opacity: 0.6;
				cursor: not-allowed;
				transform: none;
				box-shadow: none;
			}

			.message {
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				display: none;
			}

			.error-message {
				background: #ffe6e6;
				color: #d73a49;
				border: 1px solid #f5b7b1;
			}

			.success-message {
				background: #e6ffe6;
				color: #28a745;
				border: 1px solid #b7f5b7;
			}

			.user-info {
				background: #e3f2fd;
				padding: 1rem;
				border-radius: 6px;
				border-left: 4px solid #2196f3;
			}

			.user-email {
				font-weight: 600;
				color: #1976d2;
			}
		</style>
	</head>
	<body>
		<div class="main-wrapper">
			<div class="container">
			<div class="header">
				<button class="back-button" onclick="history.back()">
					←
				</button>
				<h1>設定</h1>
			</div>

			<div class="section">
				<h2>アカウント情報</h2>
				<div class="user-info">
					<div>メールアドレス: <span class="user-email" id="userEmail">読み込み中...</span></div>
				</div>
			</div>

			<div class="section">
				<h2>パスワード変更</h2>
				<div id="errorMessage" class="message error-message"></div>
				<div id="successMessage" class="message success-message"></div>
				
				<form id="changePasswordForm">
					<div class="input-group">
						<label for="currentPassword">現在のパスワード</label>
						<input
							type="password"
							id="currentPassword"
							name="currentPassword"
							required
							placeholder="現在のパスワード"
						/>
					</div>
					<div class="input-group">
						<label for="newPassword">新しいパスワード</label>
						<input
							type="password"
							id="newPassword"
							name="newPassword"
							required
							placeholder="新しいパスワード"
						/>
						<div class="password-requirements">
							※ 8文字以上、大文字・小文字・数字を含む必要があります
						</div>
					</div>
					<div class="input-group">
						<label for="confirmPassword">新しいパスワード（確認）</label>
						<input
							type="password"
							id="confirmPassword"
							name="confirmPassword"
							required
							placeholder="新しいパスワード（確認）"
						/>
					</div>
					<button type="submit" class="change-password-button" id="changePasswordButton">
						パスワードを変更
					</button>
				</form>
				</div>
			</div>
		</div>

		<Footer />

		<script
			define:vars={{
				cognitoRegion: import.meta.env.PUBLIC_COGNITO_REGION,
				cognitoUserPoolId: import.meta.env.PUBLIC_COGNITO_USER_POOL_ID,
				cognitoClientId: import.meta.env.PUBLIC_COGNITO_CLIENT_ID,
			}}
		>
			const CONFIG = {
				COGNITO_USER_POOL_ID: cognitoUserPoolId,
				COGNITO_CLIENT_ID: cognitoClientId,
				AWS_REGION: cognitoRegion,
			};

			class CognitoAuth {
				constructor(config) {
					this.config = config;
				}

				async changePassword(accessToken, previousPassword, proposedPassword) {
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target": "AWSCognitoIdentityProviderService.ChangePassword",
							},
							body: JSON.stringify({
								AccessToken: accessToken,
								PreviousPassword: previousPassword,
								ProposedPassword: proposedPassword,
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(error.message || "パスワード変更に失敗しました");
					}

					return await response.json();
				}
			}

			const cognitoAuth = new CognitoAuth(CONFIG);

			function showError(message) {
				const errorDiv = document.getElementById("errorMessage");
				errorDiv.textContent = message;
				errorDiv.style.display = "block";
				document.getElementById("successMessage").style.display = "none";
			}

			function showSuccess(message) {
				const successDiv = document.getElementById("successMessage");
				successDiv.textContent = message;
				successDiv.style.display = "block";
				document.getElementById("errorMessage").style.display = "none";
			}

			function hideMessages() {
				document.getElementById("errorMessage").style.display = "none";
				document.getElementById("successMessage").style.display = "none";
			}

			// 認証チェック
			const accessToken = localStorage.getItem("accessToken");
			const userEmail = localStorage.getItem("userEmail");

			if (!accessToken) {
				window.location.href = "/";
				return;
			}

			// ユーザー情報表示
			if (userEmail) {
				document.getElementById("userEmail").textContent = userEmail;
			}

			// パスワード変更フォーム
			document.getElementById("changePasswordForm").addEventListener("submit", async function (e) {
				e.preventDefault();
				hideMessages();

				const currentPassword = document.getElementById("currentPassword").value;
				const newPassword = document.getElementById("newPassword").value;
				const confirmPassword = document.getElementById("confirmPassword").value;

				if (!currentPassword || !newPassword || !confirmPassword) {
					showError("すべての項目を入力してください。");
					return;
				}

				if (newPassword !== confirmPassword) {
					showError("新しいパスワードが一致しません。");
					return;
				}

				if (newPassword.length < 8) {
					showError("新しいパスワードは8文字以上で入力してください。");
					return;
				}

				// パスワード強度チェック
				const hasUpperCase = /[A-Z]/.test(newPassword);
				const hasLowerCase = /[a-z]/.test(newPassword);
				const hasNumbers = /\d/.test(newPassword);

				if (!hasUpperCase || !hasLowerCase || !hasNumbers) {
					showError("新しいパスワードには大文字、小文字、数字を含む必要があります。");
					return;
				}

				const changeButton = document.getElementById("changePasswordButton");
				changeButton.disabled = true;
				changeButton.textContent = "変更中...";

				try {
					await cognitoAuth.changePassword(accessToken, currentPassword, newPassword);
					showSuccess("パスワードが正常に変更されました。");
					
					// フォームをリセット
					document.getElementById("changePasswordForm").reset();
				} catch (error) {
					showError(error.message);
				} finally {
					changeButton.disabled = false;
					changeButton.textContent = "パスワードを変更";
				}
			});
		</script>
	</body>
</html>