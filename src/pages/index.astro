---
import Footer from '../components/Footer.astro';
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>サインイン - VRChat Worlds Dashboard</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
					Roboto, sans-serif;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				margin: 0;
				padding: 0;
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
			}

			.login-container {
				background: white;
				padding: 2rem;
				border-radius: 12px;
				box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
				width: 100%;
				max-width: 400px;
				text-align: center;
			}

			h1 {
				color: #333;
				margin-bottom: 1.5rem;
				font-size: 1.8rem;
			}

			.input-group {
				margin-bottom: 1.5rem;
				text-align: left;
			}

			label {
				display: block;
				margin-bottom: 0.5rem;
				color: #555;
				font-weight: 500;
			}

			input[type="email"],
			input[type="password"] {
				width: 100%;
				padding: 0.75rem;
				border: 2px solid #ddd;
				border-radius: 6px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
				box-sizing: border-box;
			}

			input[type="email"]:focus,
			input[type="password"]:focus {
				outline: none;
				border-color: #667eea;
			}

			.login-button {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				border: none;
				padding: 0.75rem 2rem;
				font-size: 1rem;
				font-weight: 600;
				border-radius: 6px;
				cursor: pointer;
				transition:
					transform 0.2s ease,
					box-shadow 0.2s ease;
				width: 100%;
				margin-bottom: 1rem;
			}

			.login-button:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.login-button:disabled {
				opacity: 0.6;
				cursor: not-allowed;
				transform: none;
				box-shadow: none;
			}

			.error-message {
				background: #ffe6e6;
				color: #d73a49;
				padding: 0.75rem;
				border-radius: 6px;
				margin-top: 1rem;
				border: 1px solid #f5b7b1;
				display: none;
			}

			.links {
				text-align: center;
				margin-top: 1rem;
			}

			.links a {
				color: #667eea;
				text-decoration: none;
				margin: 0 0.5rem;
				font-size: 0.9rem;
			}

			.links a:hover {
				text-decoration: underline;
			}
		</style>
	</head>
	<body>
		<div class="login-container">
			<h1>サインイン</h1>
			<form id="loginForm">
				<div class="input-group">
					<label for="email">メールアドレス</label>
					<input
						type="email"
						id="email"
						name="email"
						required
						placeholder="example@email.com"
					/>
				</div>
				<div class="input-group">
					<label for="password">パスワード</label>
					<input
						type="password"
						id="password"
						name="password"
						required
						placeholder="パスワード"
					/>
				</div>
				<button type="submit" class="login-button" id="loginButton"
					>サインイン</button
				>
			</form>

			<div class="error-message" id="errorMessage"></div>

			<div class="links">
				<a href="/signup">アカウント作成</a>
			</div>
		</div>
		<Footer />

		<script
			define:vars={{
				cognitoRegion: import.meta.env.PUBLIC_COGNITO_REGION,
				cognitoUserPoolId: import.meta.env.PUBLIC_COGNITO_USER_POOL_ID,
				cognitoClientId: import.meta.env.PUBLIC_COGNITO_CLIENT_ID,
			}}
		>
			const CONFIG = {
				COGNITO_USER_POOL_ID: cognitoUserPoolId,
				COGNITO_CLIENT_ID: cognitoClientId,
				AWS_REGION: cognitoRegion,
			};

			class CognitoAuth {
				constructor(config) {
					this.config = config;
				}

				async signIn(email, password) {
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target":
									"AWSCognitoIdentityProviderService.InitiateAuth",
							},
							body: JSON.stringify({
								AuthFlow: "USER_PASSWORD_AUTH",
								ClientId: this.config.COGNITO_CLIENT_ID,
								AuthParameters: {
									USERNAME: email,
									PASSWORD: password,
								},
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(
							error.message || "サインインに失敗しました",
						);
					}

					return await response.json();
				}
			}

			const cognitoAuth = new CognitoAuth(CONFIG);

			function showError(message) {
				const errorDiv = document.getElementById("errorMessage");
				errorDiv.textContent = message;
				errorDiv.style.display = "block";
			}

			function hideError() {
				document.getElementById("errorMessage").style.display = "none";
			}

			// 既にサインインしている場合はダッシュボードにリダイレクト
			if (localStorage.getItem("idToken")) {
				window.location.href = "/dashboard";
			}

			const loginForm = document.getElementById("loginForm");

			if (loginForm) {
				loginForm.addEventListener("submit", async function (e) {
					e.preventDefault();
					hideError();

					const email = document.getElementById("email").value.trim();
					const password = document.getElementById("password").value;

					if (!email || !password) {
						showError(
							"メールアドレスとパスワードを入力してください。",
						);
						return;
					}

					const loginButton = document.getElementById("loginButton");
					loginButton.disabled = true;
					loginButton.textContent = "サインイン中...";

					try {
						const result = await cognitoAuth.signIn(
							email,
							password,
						);

						if (result.AuthenticationResult) {
							localStorage.setItem(
								"accessToken",
								result.AuthenticationResult.AccessToken,
							);
							localStorage.setItem(
								"idToken",
								result.AuthenticationResult.IdToken,
							);
							localStorage.setItem(
								"refreshToken",
								result.AuthenticationResult.RefreshToken,
							);
							localStorage.setItem("userEmail", email);

							window.location.href = "/dashboard";
						} else {
							showError("認証情報が不正です。");
						}
					} catch (error) {
						showError(error.message);
					} finally {
						loginButton.disabled = false;
						loginButton.textContent = "サインイン";
					}
				});
			}
		</script>
	</body>
</html>
