---
import Footer from '../components/Footer.astro';
---

<html lang="ja">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>サインアップ - VRChat Worlds Dashboard</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
					Roboto, sans-serif;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				margin: 0;
				padding: 0;
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
			}

			.signup-container {
				background: white;
				padding: 2rem;
				border-radius: 12px;
				box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
				width: 100%;
				max-width: 400px;
				text-align: center;
			}

			h1 {
				color: #333;
				margin-bottom: 1.5rem;
				font-size: 1.8rem;
			}

			.input-group {
				margin-bottom: 1.5rem;
				text-align: left;
			}

			label {
				display: block;
				margin-bottom: 0.5rem;
				color: #555;
				font-weight: 500;
			}

			input[type="email"],
			input[type="password"] {
				width: 100%;
				padding: 0.75rem;
				border: 2px solid #ddd;
				border-radius: 6px;
				font-size: 1rem;
				transition: border-color 0.3s ease;
				box-sizing: border-box;
			}

			input[type="email"]:focus,
			input[type="password"]:focus {
				outline: none;
				border-color: #667eea;
			}

			.signup-button {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				border: none;
				padding: 0.75rem 2rem;
				font-size: 1rem;
				font-weight: 600;
				border-radius: 6px;
				cursor: pointer;
				transition:
					transform 0.2s ease,
					box-shadow 0.2s ease;
				width: 100%;
				margin-bottom: 1rem;
			}

			.signup-button:hover {
				transform: translateY(-2px);
				box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
			}

			.signup-button:disabled {
				opacity: 0.6;
				cursor: not-allowed;
				transform: none;
				box-shadow: none;
			}

			.links {
				text-align: center;
				margin-top: 1rem;
			}

			.links a {
				color: #667eea;
				text-decoration: none;
				margin: 0 0.5rem;
			}

			.links a:hover {
				text-decoration: underline;
			}

			.error-message {
				background: #ffe6e6;
				color: #d73a49;
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				border: 1px solid #f5b7b1;
				display: none;
			}

			.success-message {
				background: #e6ffe6;
				color: #28a745;
				padding: 0.75rem;
				border-radius: 6px;
				margin-bottom: 1rem;
				border: 1px solid #b7f5b7;
				display: none;
			}

			.confirmation-container {
				display: none;
			}

			.confirmation-input {
				margin-top: 1rem;
			}
		</style>
	</head>
	<body>
		<div class="signup-container">
			<h1>アカウント作成</h1>

			<div id="errorMessage" class="error-message"></div>
			<div id="successMessage" class="success-message"></div>

			<div id="signupForm">
				<form id="signupFormElement">
					<div class="input-group">
						<label for="email">メールアドレス</label>
						<input
							type="email"
							id="email"
							name="email"
							required
							placeholder="example@email.com"
						/>
					</div>
					<div class="input-group">
						<label for="password">パスワード</label>
						<input
							type="password"
							id="password"
							name="password"
							required
							placeholder="8文字以上のパスワード"
						/>
					</div>
					<div class="input-group">
						<label for="confirmPassword">パスワード確認</label>
						<input
							type="password"
							id="confirmPassword"
							name="confirmPassword"
							required
							placeholder="パスワードを再入力"
						/>
					</div>
					<button
						type="submit"
						class="signup-button"
						id="signupButton">アカウント作成</button
					>
				</form>
			</div>

			<div id="confirmationContainer" class="confirmation-container">
				<!-- <p>
					確認メールを送信しました。メール内のリンクをクリックしてアカウントを有効化してください。
				</p> -->
				<form id="confirmationForm">
					<!-- <div class="input-group confirmation-input">
						<label for="confirmationCode">確認コード</label>
						<input
							type="text"
							id="confirmationCode"
							name="confirmationCode"
							placeholder="メールで受信した確認コード"
						/>
					</div> -->
					<!-- <button
						type="submit"
						class="signup-button"
						id="confirmButton">確認しました</button
					> -->
				</form>
			</div>

			<div class="links">
				<a href="/">ログイン</a>
			</div>
		</div>
		<Footer />

		<script
			define:vars={{
				cognitoRegion: import.meta.env.PUBLIC_COGNITO_REGION,
				cognitoUserPoolId: import.meta.env.PUBLIC_COGNITO_USER_POOL_ID,
				cognitoClientId: import.meta.env.PUBLIC_COGNITO_CLIENT_ID,
			}}
		>
			const CONFIG = {
				COGNITO_USER_POOL_ID: cognitoUserPoolId,
				COGNITO_CLIENT_ID: cognitoClientId,
				AWS_REGION: cognitoRegion,
			};

			class CognitoAuth {
				constructor(config) {
					this.config = config;
				}

				async signUp(email, password) {
					// @を_at_を置き換え
					if (!email.includes("@")) {
						throw new Error("メールアドレスが無効です。");
					}
					const username = email.replace(/@/g, "_at_");
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target":
									"AWSCognitoIdentityProviderService.SignUp",
							},
							body: JSON.stringify({
								ClientId: this.config.COGNITO_CLIENT_ID,
								Username: username,
								Password: password,
								UserAttributes: [
									{
										Name: "email",
										Value: email,
									},
								],
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(
							error.message || "サインアップに失敗しました",
						);
					}

					return await response.json();
				}

				async confirmSignUp(email, confirmationCode) {
					const response = await fetch(
						`https://cognito-idp.${this.config.AWS_REGION}.amazonaws.com/`,
						{
							method: "POST",
							headers: {
								"Content-Type": "application/x-amz-json-1.1",
								"X-Amz-Target":
									"AWSCognitoIdentityProviderService.ConfirmSignUp",
							},
							body: JSON.stringify({
								ClientId: this.config.COGNITO_CLIENT_ID,
								Username: email,
								ConfirmationCode: confirmationCode,
							}),
						},
					);

					if (!response.ok) {
						const error = await response.json();
						throw new Error(error.message || "確認に失敗しました");
					}

					return await response.json();
				}
			}

			const cognitoAuth = new CognitoAuth(CONFIG);
			let currentEmail = "";

			function showError(message) {
				const errorDiv = document.getElementById("errorMessage");
				errorDiv.textContent = message;
				errorDiv.style.display = "block";
				document.getElementById("successMessage").style.display =
					"none";
			}

			function showSuccess(message) {
				const successDiv = document.getElementById("successMessage");
				successDiv.textContent = message;
				successDiv.style.display = "block";
				document.getElementById("errorMessage").style.display = "none";
			}

			function hideMessages() {
				document.getElementById("errorMessage").style.display = "none";
				document.getElementById("successMessage").style.display =
					"none";
			}

			document
				.getElementById("signupFormElement")
				.addEventListener("submit", async function (e) {
					e.preventDefault();
					hideMessages();

					const email = document.getElementById("email").value.trim();
					const password = document.getElementById("password").value;
					const confirmPassword =
						document.getElementById("confirmPassword").value;

					if (!email || !password || !confirmPassword) {
						showError("すべての項目を入力してください。");
						return;
					}

					if (password !== confirmPassword) {
						showError("パスワードが一致しません。");
						return;
					}

					if (password.length < 8) {
						showError("パスワードは8文字以上で入力してください。");
						return;
					}

					const signupButton =
						document.getElementById("signupButton");
					signupButton.disabled = true;
					signupButton.textContent = "作成中...";

					try {
						await cognitoAuth.signUp(email, password);
						currentEmail = email;

						document.getElementById("signupForm").style.display =
							"none";
						document.getElementById(
							"confirmationContainer",
						).style.display = "block";
						showSuccess(
							"確認メールを送信しました。メール内のリンクをクリックしてアカウントを有効化してください。",
						);
					} catch (error) {
						showError(error.message);
					} finally {
						signupButton.disabled = false;
						signupButton.textContent = "アカウント作成";
					}
				});

			document
				.getElementById("confirmationForm")
				.addEventListener("submit", async function (e) {
					e.preventDefault();
					hideMessages();

					const confirmationCode = document
						.getElementById("confirmationCode")
						.value.trim();

					// if (!confirmationCode) {
					// 	showError("確認コードを入力してください。");
					// 	return;
					// }

					const confirmButton =
						document.getElementById("confirmButton");
					confirmButton.disabled = true;
					confirmButton.textContent = "確認中...";

					try {
						await cognitoAuth.confirmSignUp(
							currentEmail,
							confirmationCode,
						);
						showSuccess(
							"アカウントが有効化されました。ログインページに移動します。",
						);

						setTimeout(() => {
							window.location.href = "/";
						}, 2000);
					} catch (error) {
						showError(error.message);
					} finally {
						confirmButton.disabled = false;
						confirmButton.textContent = "確認";
					}
				});
		</script>
	</body>
</html>
